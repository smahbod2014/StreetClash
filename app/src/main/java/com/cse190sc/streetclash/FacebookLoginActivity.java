package com.cse190sc.streetclash;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.app.LoaderManager.LoaderCallbacks;

import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;

import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.crashlytics.android.Crashlytics;
import com.crashlytics.android.ndk.CrashlyticsNdk;
import com.cse190sc.streetclash.R;
import com.facebook.AccessToken;
import com.facebook.AccessTokenTracker;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphRequestAsyncTask;
import com.facebook.GraphResponse;
import com.facebook.appevents.AppEventsLogger;
import com.facebook.login.LoginResult;
import com.facebook.login.widget.LoginButton;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import io.fabric.sdk.android.Fabric;

import static android.Manifest.permission.READ_CONTACTS;

/******************************************************************************
 * A large majority of this code was generated by Android Studio. The buttons,
 * EditText, etc. are not attached to anything. Code written by me is indicated
 * by these comment blocks (to distinguish between the provided comments).
 *****************************************************************************/
public class FacebookLoginActivity extends AppCompatActivity
        implements LoaderCallbacks<Cursor> {
    private static final Object lock = new Object();

    /**
     * Id to identity READ_CONTACTS permission request.
     */
    private static final int REQUEST_READ_CONTACTS = 0;

    /**
     * A dummy authentication store containing known user names and passwords.
     * TODO: remove after connecting to a real authentication system.
     */
    private static final String[] DUMMY_CREDENTIALS = new String[]{
            "foo@example.com:hello", "bar@example.com:world"
    };
    /**
     * Keep track of the login task to ensure we can cancel it if requested.
     */
    private UserLoginTask mAuthTask = null;

    // UI references.
    private AutoCompleteTextView mEmailView;
    private EditText mPasswordView;
    private View mProgressView;
    private View mLoginFormView;
    private Button mProceedToApp;

    /**************************************************************************
     * Private Instances to control Login
     *************************************************************************/
    private LoginButton button;
    private CallbackManager callbackManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        /********* Initialize the Facebook SDK before setContentView *********/
        FacebookSdk.sdkInitialize(getApplicationContext());
        setContentView(R.layout.activity_facebook_login);

        Fabric.with(this, new Crashlytics(), new CrashlyticsNdk());

        /**********************************************************************
         * 1. Initialize FacebookSDK
         * 2. Initialize CallbackManager
         * 3. Attach LoginButton to private instance
         * 4. Register CallbackManager listener for LoginButton
         *********************************************************************/
        callbackManager = CallbackManager.Factory.create();
        button = (LoginButton) findViewById(R.id.login_button);
        button.setReadPermissions(Arrays.asList("public_profile", "email", "user_birthday"));
        // You can set your Read/ Publish Permissions here
        // button.setReadPermissions(List or String);
        // or button .setPublishPermissions(List or String)

        mProceedToApp = (Button) findViewById(R.id.proceed_to_app);

        button.registerCallback(callbackManager,
                new FacebookCallback<LoginResult>() {
                    /******************************************************************
                     * Method called when the user successfully logs in. You can
                     * redirect the user to another activity in this call (like I coded
                     * below).
                     * @param loginResult - Contains granted permissions, AccessTokens
                     *                      AccessTokens = appID, userID, tokenID, etc.
                     *                      You can use the information here to add to
                     *                      your database
                     *****************************************************************/
                    @Override
                    public void onSuccess(LoginResult loginResult) {
//                        String tempID = loginResult.getAccessToken().getUserId().substring(0, 5);
//                        int tempIDint = Integer.parseInt(tempID) / 9;
                        final String userID = loginResult.getAccessToken().getUserId()
                                .substring(0, 4);
                        String tokenID = loginResult.getAccessToken().getToken();
                        Log.e("StreetClash", "onSuccess : ID = " +
                                userID + "\nToken = " + tokenID);

                        final AccessToken accessToken = loginResult.getAccessToken();
                        GraphRequestAsyncTask r = GraphRequest.newMeRequest(accessToken, new GraphRequest.GraphJSONObjectCallback() {
                            @Override
                            public void onCompleted(final JSONObject user, GraphResponse graphResponse) {
                                final SharedPreferences prefs = getSharedPreferences("com.cse190sc.streetclash",
                                        Context.MODE_PRIVATE);
                                prefs.edit().putString("userID", userID).apply();

                                JsonObjectRequest request = new JsonObjectRequest(
                                        Request.Method.GET,
                                        Constants.SERVER_URL + "/users/facebook?userID=" + userID,
                                        null,
                                        new Response.Listener<JSONObject>() {
                                            @Override
                                            public void onResponse(JSONObject response) {
                                                // set the beacon id, very important if this app is going to work at all
                                                BeaconTransmitterApplication app =
                                                        (BeaconTransmitterApplication) FacebookLoginActivity.this.getApplicationContext();
                                                app.setBeaconIdentifier(userID);

                                                Log.e("StreetClash", "Setting beacon ID to " + userID);
                                                if (response.has("newUser")) {
                                                    //we are a new user
                                                    Log.i("StreetClash", "Facebook: New user!");
                                                    Intent i = new Intent(getApplicationContext(), ProfileEditActivity.class);
                                                    i.putExtra("facebookName", user.optString("name", "Enter name here"));
                                                    prefs.edit().putBoolean("newUser", true).apply();
                                                    prefs.edit().putBoolean("temporaryPic", true).apply();
                                                    startActivity(i);
                                                    finish();
                                                }
                                                else {
                                                    prefs.edit().putBoolean("newUser", false).apply();
                                                    Intent i = new Intent(getApplicationContext(), ProfileListActivity.class);
                                                    startActivity(i);
                                                    finish();
                                                }
                                            }
                                        },
                                        new Response.ErrorListener() {
                                            @Override
                                            public void onErrorResponse(VolleyError error) {
                                                Log.e("StreetClash", "Volley error + : " + error.getMessage());
                                            }
                                        }
                                );

                                VolleySingleton.getInstance(getApplicationContext()).addToRequestQueue(request);
                            }
                        }).executeAsync();


                        //make request to server sending userid
                        //if the user exists in the server, send user to pass feed
                        //else send user to profile edit




                        /**************************************************************
                         * Creates a new Intent to begin and pass in the userID and
                         * tokenID to the next Activity. Calling finish() prevents the
                         * user from returning to this Activity.
                         *
                         * Do note that you do not need to put in the Extras for the
                         * User ID and Token ID as they are available through:
                         * AccessTokens.getCurrentAccessToken().getUserID() or
                         * AccessTokens.getCurrentAccessToken().getTokenID()
                         *************************************************************/
                    }

                    /******************************************************************
                     * Method called when the user cancels the login attempt
                     *****************************************************************/
                    @Override
                    public void onCancel() {
                        Log.e("StreetClash", "onCancel");
                    }

                    /******************************************************************
                     * Method called when an error occurs with login
                     * @param error - A FacebookException/ Error
                     *****************************************************************/
                    @Override
                    public void onError(FacebookException error) {
                        Log.e("StreetClash", "Error: " + error.getMessage());
                    }
                });

        // Set up the login form.
        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);
        populateAutoComplete();

        mPasswordView = (EditText) findViewById(R.id.password);
        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;
                }
                return false;
            }
        });

        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);
        mEmailSignInButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                attemptLogin();
            }
        });

        mLoginFormView = findViewById(R.id.login_form);
        mProgressView = findViewById(R.id.login_progress);
    }

    /**********************************************************************
     * This method is called when your application calls
     * startActivityForResult. Since pressing the FB login button starts
     * an activity (that is, it logs the user in), this method is called
     * immediately after that Activity returns. To ensure the CallbackManager
     * captures the end of the activity call, we call its onActivityResult
     * method. This in turn will fire the appropriate methods on the
     * FacebookCallback object created for the button.
     *********************************************************************/
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        callbackManager.onActivityResult(requestCode, resultCode, data);
    }

    private void populateAutoComplete() {
        if (!mayRequestContacts()) {
            return;
        }

        getLoaderManager().initLoader(0, null, this);
    }

    private boolean mayRequestContacts() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            return true;
        }
        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
                    .setAction(android.R.string.ok, new View.OnClickListener() {
                        @Override
                        @TargetApi(Build.VERSION_CODES.M)
                        public void onClick(View v) {
                            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                        }
                    });
        } else {
            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
        }
        return false;
    }

    /**
     * Callback received when a permissions request has been completed.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        if (requestCode == REQUEST_READ_CONTACTS) {
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                populateAutoComplete();
            }
        }
    }


    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    private void attemptLogin() {
        if (mAuthTask != null) {
            return;
        }

        // Reset errors.
        mEmailView.setError(null);
        mPasswordView.setError(null);

        // Store values at the time of the login attempt.
        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(email)) {
            mEmailView.setError(getString(R.string.error_field_required));
            focusView = mEmailView;
            cancel = true;
        } else if (!isEmailValid(email)) {
            mEmailView.setError(getString(R.string.error_invalid_email));
            focusView = mEmailView;
            cancel = true;
        }

        if (cancel) {
            // There was an error; don't attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            showProgress(true);
            mAuthTask = new UserLoginTask(email, password);
            mAuthTask.execute((Void) null);
        }
    }

    private boolean isEmailValid(String email) {
        //TODO: Replace this with your own logic
        return email.contains("@");
    }

    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logic
        return password.length() > 4;
    }

    /**
     * Shows the progress UI and hides the login form.
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    private void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
            mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                }
            });

            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mProgressView.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    @Override
    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
        return new CursorLoader(this,
                // Retrieve data rows for the device user's 'profile' contact.
                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,

                // Select only email addresses.
                ContactsContract.Contacts.Data.MIMETYPE +
                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email
                .CONTENT_ITEM_TYPE},

                // Show primary email addresses first. Note that there won't be
                // a primary email address if the user hasn't specified one.
                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");
    }

    @Override
    public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {
        List<String> emails = new ArrayList<>();
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            emails.add(cursor.getString(ProfileQuery.ADDRESS));
            cursor.moveToNext();
        }

        addEmailsToAutoComplete(emails);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> cursorLoader) {

    }

    private interface ProfileQuery {
        String[] PROJECTION = {
                ContactsContract.CommonDataKinds.Email.ADDRESS,
                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
        };

        int ADDRESS = 0;
        int IS_PRIMARY = 1;
    }


    private void addEmailsToAutoComplete(List<String> emailAddressCollection) {
        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
        ArrayAdapter<String> adapter =
                new ArrayAdapter<>(FacebookLoginActivity.this,
                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);

        mEmailView.setAdapter(adapter);
    }

    /**
     * Represents an asynchronous login/registration task used to authenticate
     * the user.
     */
    public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {

        private final String mEmail;
        private final String mPassword;

        UserLoginTask(String email, String password) {
            mEmail = email;
            mPassword = password;
        }

        @Override
        protected Boolean doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.

            try {
                // Simulate network access.
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                return false;
            }

            for (String credential : DUMMY_CREDENTIALS) {
                String[] pieces = credential.split(":");
                if (pieces[0].equals(mEmail)) {
                    // Account exists, return true if the password matches.
                    return pieces[1].equals(mPassword);
                }
            }

            // TODO: register the new account here.
            return true;
        }

        @Override
        protected void onPostExecute(final Boolean success) {
            mAuthTask = null;
            showProgress(false);

            if (success) {
                finish();
            } else {
                mPasswordView.setError(getString(R.string.error_incorrect_password));
                mPasswordView.requestFocus();
            }
        }

        @Override
        protected void onCancelled() {
            mAuthTask = null;
            showProgress(false);
        }
    }

    @Override
    protected void onResume(){
        super.onResume();

        //Logs install and app activate Appp Events.
        AppEventsLogger.activateApp(this);

        BeaconTransmitterApplication.enteringApp();

        AccessToken token = AccessToken.getCurrentAccessToken();
        if (token != null) {
            Log.i("StreetClash", "Already logged in");
            mProceedToApp.setEnabled(true);
        }
        else {
            Log.i("StreetClash", "NOPE");
            mProceedToApp.setEnabled(false);
        }
    }

    @Override
    protected void onPause(){
        super.onPause();

        //Log app deactivate App Event
        AppEventsLogger.deactivateApp(this);

        BeaconTransmitterApplication.leavingApp();
    }

    public void proceedToAppClicked(View v) {
        SharedPreferences prefs = getSharedPreferences("com.cse190sc.streetclash", Context.MODE_PRIVATE);
        prefs.edit().putBoolean("newUser", false).apply();
        BeaconTransmitterApplication app =
                (BeaconTransmitterApplication) FacebookLoginActivity.this.getApplicationContext();
        app.setBeaconIdentifier(prefs.getString("userID", "1"));
        Log.e("StreetClash", "Proceeding to app using " + prefs.getString("userID", "1") + " as our userID");
        Intent i = new Intent(getApplicationContext(), ProfileListActivity.class);
        startActivity(i);
        finish();
    }
}





















